#lang racket

(define (cont-frac-iter n d k)
  (define (iter i result)
    (if (= i 0)
        result
        (iter (- i 1) (/ (n i) (+ result (d i))))))
  (iter k 0))

(define (n i)
  (define (iter a b c j)
    (cond ((= j i)
           c)
          ((= a 1)
           (iter b c 1 (j + 1)))
          (else
           (iter b c (+ a 2) (j + 1)))))
  (iter 1 2 1 3))
    

(cont-frac-iter (lambda (i) 1.0)
                (lambda (i) 1.0)
                10)

#|
0.6180 is the approximation we are looking for; we get with k = 10
|#